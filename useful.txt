#Type 'demo()' for some demos, 'help()' for on-line help, or
#'help.start()' for an HTML browser interface to help.
#Type 'q()' to quit R.

#> source("R_profile_helper.R", keep.source = T)
#[1] "/home/asterion/R/x86_64-pc-linux-gnu-library/3.4"
#[2] "/usr/local/lib/R/site-library"                   
#[3] "/usr/lib/R/site-library"                         
#[4] "/usr/lib/R/library"                              
#Loading required package: profvis
#NULL
#> run_full_selac_optimize(seed=1053, nCores =1)
#[1] "v1.6.1-rc1"

# debugSource('~/git/testing_selac/R_profile_helper.R'); run_ecoli_profile_mode(seed=2054, mode="FASTHMMSINGLEDEBUG", nuc.model="GTR", gamma.type="none", nCores=1, ref="86cc7e9")

#( date; time R -q --no-save -e 'source("R_profile_helper.R", keep.source = T); run_full_selac_optimize(seed=1053, nCores =1, ref="744c6c8")'; date ;) |& tee -a log_profile_selacFULLb.txt

get_deltas () { rev_count=$1 ;
  ( cd ~/git/selac; 
    next_rev=$( git log -n 1 --pretty=oneline  | cut -c 1-7); 
    for  prev_rev in $( git log -n ${rev_count} --pretty=oneline | tail -n +2 | cut -c 1-7) ; 
    do echo $prev_rev..$next_rev; 
       git diff -r ${prev_rev} -r ${next_rev}  | grep '^@@\|^diff' ; 
       echo ; 
       next_rev=$prev_rev; 
    done; ) ; }


proc_block () { 
  last_offset=0; last_lines_delta=0; 
  read rev_pair; 
  prev_rev=${rev_pair:0:7}; next_rev=${rev_pair:9:7}; 
  read a b c target extra; 
  file_pat=${target/b/$next_rev}; 
  echo $next_rev to $prev_rev, file $file_pat; 
  while read a prev_diff next_diff b extra; 
  do prev_lines=${prev_diff/#*,}; 
     next_lines=${next_diff/#*,}; 
     next_offset=${next_diff/%,*}; 
     next_offset=${next_offset/#+}; 
     echo 'slot2 <- label_data[[2]] >= '$last_offset' & label_data[[2]] <= '$((next_offset+2))' & tmp'; 
     echo 'label_data[[2]][slot2] <- label_data[[2]][slot2] + '$last_lines_delta; 
     ((last_lines_delta+=prev_lines-next_lines)); ((last_offset=next_offset+next_lines-3)); 
  done;  
  echo 'slot2 <- label_data[[2]] >= '$last_offset' & tmp'; 
  echo 'label_data[[2]][slot2] <- label_data[[2]][slot2] + '$last_lines_delta; 
}

proc_block_alt () {
  last_offset=0; last_lines_delta=0;
  read a b c target extra;
  file_pat=${target/b/$next_rev};
  echo '#a' $next_rev to $prev_rev, file $file_pat;
  echo 'atmp <-grepl("'$file_pat'",label_data[[1]])'
  J=1
  while read a prev_diff next_diff b extra;
  do prev_lines=${prev_diff/#*,};
     next_lines=${next_diff/#*,};
     next_offset=${next_diff/%,*};
     next_offset=${next_offset/#+};
     slotN="islot$((J++))"
     echo $slotN' <- label_data[[2]] >= '$last_offset' & label_data[[2]] <= '$((next_offset+2))' & tmp';
     echo 'label_data[[2]]['$slotN'] <- label_data[[2]]['$slotN'] + '$last_lines_delta;
     ((last_lines_delta+=prev_lines-next_lines)); ((last_offset=next_offset+next_lines-3));
  done;
  echo -n 'islots <- '
  seq -f 'slot%.0f' $J | paste -s -d '|' -
  echo 'label_data[[1]][slots] <- sub("^GrahamDB-selac-'$next_rev'","GrahamDB-selac-'$prev_rev'",label_data[[1]][slots])'
  slotN="islot$((J++))"
  echo $slotN' <- label_data[[2]] >= '$last_offset' & tmp';
  echo 'label_data[[2]]['$slotN'] <- label_data[[2]]['$slotN'] + '$last_lines_delta;
}


proc_deltas () { rev_count=${1:-5} ;
  ( cd ~/git/selac;
    next_rev=$( git log -n 1 --pretty=oneline  | cut -c 1-7);
    for  prev_rev in $( git log -n $rev_count --pretty=oneline | tail -n +2 | cut -c 1-7) ; 
    do echo '#'$prev_rev..$next_rev;
       git diff -r ${prev_rev} -r ${next_rev} R/selac.R  | grep '^@@\|^diff' | proc_block_alt | sort | sed -e 's/islot/slot/g; s/^atmp/tmp/'; 
       echo ;
       next_rev=$prev_rev;
    done; ) ; }


wait_for_profile_finish () {
  init_date="$(date)"
  while [[ $( find *.Rprof log_profile_*.txt -mmin -30 | wc -l) -gt 0 ]]
  do date; sleep 1h; done; 
  echo -e "INIT\t$init_date\nReady\t$(date)"; }


run_fast_benchmark () { 
  start_off=$((5100+${1:- 0}*6)); end_off=$((start_off+5)) ; iter_gamma=${2:-none}
  for iter_nuc in GTR UNREST
  do time ./run_many_ecoli_profile.sh SHORT $start_off $end_off $iter_gamma $iter_nuc
  done ; }

run_heavy_benchmark () { 
  for iter_nuc in UNREST GTR
  do for iter_gamma in none quadrature median lognormal 
    do time ./run_many_ecoli_profile.sh SHORT 5100 5129 $iter_gamma $iter_nuc
    done
  done ; }


run_light_benchmark () { 
  for iter_nuc in UNREST GTR
  do for iter_gamma in none quadrature median lognormal 
    do time ./run_many_ecoli_profile.sh SHORT 5100 5105 $iter_gamma $iter_nuc
    done
  done ; }

run_heavy_benchmark_mc () { 
  mc_num_cores="${1:-2}"
  for iter_nuc in GTR UNREST; do 
    for iter_gamma in quadrature none median lognormal ;
    do time ./run_many_ecoli_mc.sh SHORT 5100 5129 $mc_num_cores $iter_gamma $iter_nuc
    done 
  done ; }


hmm_benchmark_battery () {
#( start_date="$(date)"; 
  cur_revision="${1:-5c98a1f}"
  cur_seed_offset="${2:-3010}"
  ./check_ecoli_profile_short.sh 2053 "$cur_revision"
  ./check_ecoli_profile_mcXmode.sh HMMEVALFULL 2053  10 "$cur_revision"
  ./check_ecoli_profile_mcXmode.sh HMMEVAL50 2054 1 "$cur_revision" 
  for iter_gamma in none median quadrature lognormal
  do ./run_many_ecoli_mc.sh FASTHMMTEST $cur_seed_offset $((cur_seed_offset+5)) 1 $iter_gamma UNREST "$cur_revision" ; done
#echo -e "Start\t$start_date\nEnd\t$(date)" ;);
}

hmm_longbenchmark_battery () {
#( start_date="$(date)"; 
  cur_revision="${1:-5c98a1f}"
  ./check_ecoli_profile_short.sh 2054 "$cur_revision"
  ./check_ecoli_profile_mcXmode.sh HMMEVALFULL 2053 1 "$cur_revision"
  for iter_gamma in none median quadrature lognormal
  do ./run_many_ecoli_mc.sh HMMEVAL50 $((cur_seed_offset+5)) 1 $iter_gamma UNREST "$cur_revision" ; done
#echo -e "Start\t$start_date\nEnd\t$(date)" ;);
}


wait_and_run () {
  wait_for_profile_finish
  start_date="$(date)"; 
  echo "RUNNING:" "$@"
  sleep 10
  "$@"
  echo -e "Init:\t$init_date\nStart\t$start_date\nEnd\t$(date)"
}
